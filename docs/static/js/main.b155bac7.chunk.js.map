{"version":3,"sources":["logo.svg","App.tsx","reportWebVitals.ts","components/AddCategory.tsx","helpers/getGifs.tsx","components/GifGridItem.tsx","components/GifGrid.tsx","hooks/useFetchGifs.tsx","components/GifExpertApp.tsx","index.tsx"],"names":["App","className","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","propType","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","GifGrid","loading","state","setState","useEffect","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAAe,G,MAAA,IAA0B,kC,eCyB1BA,MArBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,6CAGA,mBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,+BCEOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,sBCNRQ,EAAc,SAAC,GAA4B,IAAzBC,EAAwB,EAAxBA,cAEpB,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAAEC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAACS,GAAD,OAAgBP,GAAhB,mBAA8BO,OAC7CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEjB,OAAOuB,aAyB/BZ,EAAYc,SAAW,CACnBb,c,OAAec,EAAUC,KAAKC,Y,mCCjCnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACgCC,UAAUH,GAD1C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAK,SAAEC,GAAe,IAAD,EACnC,MAAO,CACHC,GAAQD,EAAIC,GACZC,MAAQF,EAAIE,MACZV,IAAG,UAAKQ,EAAIG,cAAT,aAAK,EAAYC,iBAAiBZ,QATxB,kBAYdM,GAZc,4CAAH,sDCChBO,EAAc,SAAC,GAAwB,IAAtBH,EAAqB,EAArBA,MAAOV,EAAc,EAAdA,IAE1B,OACI,sBAAKrC,UAAU,4CAAf,UACG,qBAAKC,IAAMoC,EAAMlC,IAAM4C,IACvB,4BAAKA,QCDVI,EAAU,SAAC,GAAwB,IAAtBhB,EAAqB,EAArBA,SAEf,ECCiB,SAAEA,GAEnB,IAEA,EAA0BjB,mBAFT,CAACwB,KAAM,GAAGU,SAAS,IAEpC,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OAXAC,qBAAU,WAENrB,EAAQC,GACPzB,MAAK,SAAA8C,GACFF,EAAS,CACLZ,KAAMc,EACNJ,SAAS,SAGlB,CAACjB,IAEGkB,EDlByBI,CAActB,GAAjCa,EAAb,EAAQN,KAAaU,EAArB,EAAqBA,QAErB,OACI,qCACA,oBAAIpD,UAAU,uCAAd,SAAuDmC,IACrDiB,GAAW,mBAAGpD,UAAU,uCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEQgD,EAAOJ,KAAM,SAACC,GAAD,OACT,cAAC,EAAD,eAEQA,GADEA,EAAIC,aEd5BY,EAAgB,WAElB,MAAmCxC,mBAAS,CAAC,WAA7C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAEA,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAED,6BAEQ0C,EAAWf,KAAK,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCXjCyB,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BzD,M","file":"static/js/main.b155bac7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          ReactApp Gif\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from \"react\"; \nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ( { setCategories }: any )=>{\n\n    const [inputValue, setinputValue]=useState('');\n\n    const handleInputChange = (e:any) => {\n        setinputValue(e.target.value)\n    }\n\n    const handleSudmit = ( e:any ) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2 ){\n            setCategories( (cats:any) => [ inputValue,...cats ]);\n            setinputValue('');\n        }\n    }\n\n    return ( \n        <form onSubmit={handleSudmit}>\n            <input\n                type='text'\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\nexport {\n    AddCategory\n}\nAddCategory.propType = {\n    setCategories: PropTypes.func.isRequired\n} ","\n  export const getGifs = async( category: any )=>{\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=RMehG1d6gNhfYrAp0TLETEJdSYxF5FUu`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( ( img: any ) => {\n        return {\n            id:     img.id,\n            title:  img.title,\n            url:    img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React from \"react\"; \n\nconst GifGridItem = ({ title, url }:any) => {\n    \n    return (\n        <div className='card animate__animated animate__headShake'>\n           <img src={ url } alt={ title }/>\n           <p>{ title }</p>\n        </div>\n    )\n}\n\nexport{\n    GifGridItem\n}","\nimport React, { useState } from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\n\nconst GifGrid = ({ category }: any ) => {\n\n    const { data:images ,loading} = useFetchGifs( category );\n\n    return (\n        <>\n        <h3 className='animate__animated animate__headShake' >{category}</h3>\n        { loading && <p className='animate__animated animate__headShake'>Loading</p> }\n        <div className='card-grid'>  \n            {\n                images.map(  (img: any)  => (\n                    <GifGridItem \n                        key={ img.id } \n                        {...img }\n                    />\n                ))\n            }\n        </div>\n        </>\n    )\n}\n\nexport {\n    GifGrid\n}","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\n\ninterface Data {\n    data: Array<number>;\n    loading: boolean;\n}\n\nconst useFetchGifs = ( category: any ) => {\n\n    let data: Data = {data: [],loading: true};\n\n    const [state, setState] = useState(data)\n\n    useEffect(()=> {\n\n        getGifs(category)\n        .then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        });\n    }, [category])\n\n    return state;\n}\n\nexport {\n    useFetchGifs\n}\n\n\n","import React, { useState } from 'react';\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\nconst GifExpertApp =  () => {\n\n    const [categories, setCategories]= useState(['Naruto']);\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n           <ol>\n               {\n                   categories.map( category => ( \n                        <GifGrid\n                            key={category}\n                            category={category}                    \n                        /> \n                   )) \n                        \n               }\n           </ol>\n\n        </div>\n\n    )\n}\n\n\n\nexport{\n    GifExpertApp\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { GifExpertApp } from './components/GifExpertApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp/>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}